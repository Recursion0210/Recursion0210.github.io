<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>recursion’s Blog</title>
    <description>与世界分享我的知识、经验和见解</description>
    <link>http://recursion0210.github.io//</link>
    <atom:link href="http://recursion0210.github.io//feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Thu, 31 Mar 2016 10:22:52 +0800</pubDate>
    <lastBuildDate>Thu, 31 Mar 2016 10:22:52 +0800</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>阿里百川、友盟推送SDK集成</title>
        <description>&lt;h2 id=&quot;section&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;我在安卓项目中先集成了阿里百川即时通讯的SDK，后又集成友盟的消息推送SDK，项目编译的时候就会报以下错误。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Multiple dex files define Lcom/ta/utdid2/android/utils/UTDID
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;报错说的很清楚:是项目引用的JAR包有重复的地方。后发现集成阿里系的SDK（支付宝等）都会出现此错误。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;错误原因&lt;/h2&gt;

&lt;p&gt;1.友盟推送SDK为了提高设备标识的唯一性，除了UMID之外，还用到了Taobao提供的一个设备标识生成库(UTDID.jar)做双向保证。当前推送SDK兼容的UDID版本是V1.1.0。&lt;/p&gt;

&lt;p&gt;2.淘宝提供的设备标识生成库(UTDID.jar)已经广泛应用在阿里系的App中了，包括支付宝。部分集成过支付宝SDK的App，在集成友盟推送SDK的时候，会存在包冲突的问题。 为此我们提供了去UTDID版本的SDK供开发者集成使用&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;解决方法&lt;/h2&gt;

&lt;p&gt;1.到友盟&lt;a href=&quot;http://dev.umeng.com/push/android/sdk-download&quot;&gt;SDK下载页&lt;/a&gt;去下载去UTDID版本的SDK，再集成到安卓项目中&lt;/p&gt;

</description>
        <pubDate>Mon, 07 Dec 2015 23:50:15 +0800</pubDate>
        <link>http://recursion0210.github.io//2015/12/07/%E9%98%BF%E9%87%8C%E7%99%BE%E5%B7%9D%E3%80%81%E5%8F%8B%E7%9B%9F%E6%8E%A8%E9%80%81%E9%9B%86%E6%88%90%E9%97%AE%E9%A2%98/</link>
        <guid isPermaLink="true">http://recursion0210.github.io//2015/12/07/%E9%98%BF%E9%87%8C%E7%99%BE%E5%B7%9D%E3%80%81%E5%8F%8B%E7%9B%9F%E6%8E%A8%E9%80%81%E9%9B%86%E6%88%90%E9%97%AE%E9%A2%98/</guid>
        
        <category>Android</category>
        
        <category>阿里百川即时通讯</category>
        
        
      </item>
    
      <item>
        <title>阿里百川即时通讯功能-iOS开发</title>
        <description>&lt;h2 id=&quot;section&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;在&lt;a href=&quot;../../../../2015/11/06/iOS-webApp客户端开发-小记/&quot;&gt;iOS-webApp客户端开发小记&lt;/a&gt; 的最后，我提到我们公司的产品需要在现有产品结构中加入即时通讯功能。经过对现有第三方即时通讯产品的试用和分析，我们最终选择了阿里百川提供的及时通讯功能。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;项目需求&lt;/h2&gt;

&lt;p&gt;1.学生与老师之间要能沟通（单聊）&lt;/p&gt;

&lt;p&gt;2.在同一门课程中，老师与学生们在一个聊天群里（群聊）&lt;/p&gt;

&lt;p&gt;3.学生和老师要可以和我们公司的技术支持人员能沟通（客服）&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;技术选型&lt;/h2&gt;
&lt;p&gt;前期调研了容联云、LeanCloud、环信、Bmob、阿里百川、友盟等一些做即时通信服务的第三方服务。首先我们需要其提供iOS、Android、h5、Java的SDK，接着试用了他们的Demo，然后看他们的开发文档是否详尽（公司与公司之间的开发文档真的差距好大），最后看他们的技术实力与公司实力（总不能比我们的产品先倒闭吧，哈哈）。&lt;/p&gt;

&lt;p&gt;最后选中了阿里百川，首先其是阿里无线事业部下属的，他们的技术实力和公司实力不用怀疑。其实我第一眼看中的还是他们的开发文档，非常的完善，其次是这个项目应该开始不久，他们的技术支持非常给力，一线的开发人员在充当客服，在开发的时候还跟他们打了好几通电话，技术支持非常的棒。&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;项目开发&lt;/h2&gt;
&lt;p&gt;这里讲的是iOS端如何整合阿里百川的SDK。&lt;br /&gt;
我采用的是Swift开发，而阿里百川提供的官方文档是针对Objective-C项目的，所以在此记录一下Swift项目是怎样整合的。&lt;br /&gt;
下面主要介绍快速集成和APNS推送，相信通过这两点，就会对如何在Swift中调用IMSDK相关功能有个了解，那么其他功能调用也会容易实现。&lt;/p&gt;

&lt;h3 id=&quot;section-4&quot;&gt;1.快速集成&lt;/h3&gt;

&lt;h4 id=&quot;step1-step5-imsdk&quot;&gt;Step1-Step5 引入IMSDK&lt;/h4&gt;
&lt;p&gt;按照阿里百川的即时通信服务的快速集成文档，完成Step1-Step5都是没有什么问题的。百川提供了非常好的胶水代码（将我们的App和IMSDK粘合起来的中间代码），其中包含对IMSDK主流程接口的调用代码，例如初始化、登录准备、登录、注销、打开会话列表、打开聊天页面。&lt;br /&gt;
通过调用、学习胶水代码可以为我们后期自己直接操作IMSDK来定制功能提供方向。&lt;/p&gt;

&lt;p&gt;在拖入胶水代码后就是初始化IMSDK，由于胶水代码是OC文件，在Swift项目中需要建立桥接头文件，这里可以偷个懒，直接在项目中新建一个OC文件，然后会自动生成一个桥接头文件，然后再把刚才这个OC文件删除即可，这样可以省去在项目中配置桥接头文件这一步。接着，在桥接头文件中，引入胶水代码的头文件：&lt;code&gt;#import &quot;SPKitExample.h&quot;&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&quot;step6-imsdk&quot;&gt;Step6 初始化IMSDK&lt;/h4&gt;
&lt;p&gt;在AppDelegate.swift调用基础入口胶水函数：callThisInDidFinishLaunching&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func application(application: UIApplication, didFinishLaunchingWithOptions launchOptions: [NSObject: AnyObject]?) -&amp;gt; Bool {
    // Override point for customization after application launch.
    //函数中初始化IMSDK
    SPKitExample.sharedInstance().callThisInDidFinishLaunching()        
    return true
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注意：要到SPKitExample.m里exampleInit登录函数这把key换成我们自己申请的AppKey&lt;/p&gt;

&lt;h4 id=&quot;step7-imsdk&quot;&gt;Step7 登录IMSDK&lt;/h4&gt;
&lt;p&gt;在用户登录我们自己App的账号成功后，调用基础入口胶水函数callThisAfterISVAccountLoginSuccessWithYWLoginId，使其登录IMSDK。在应用里，我用Swift稍微封装了一下登录的代码:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func loginBaichuan(userid:String,password:String){
    //应用登陆成功后，调用SDK
    SPKitExample.sharedInstance().callThisAfterISVAccountLoginSuccessWithYWLoginId(userid, passWord:password, preloginedBlock: nil, successBlock: {() -&amp;gt; Void in
        (
            print(&quot;哈哈哈，登录成功！&quot;)
        )}, failedBlock: nil)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注意：在用户退出我们的App之后，还需要使其退出IMSDK，不然App在后台，用户没有登录我们的账号体系，但是还会受到来自即时通讯功能的新消息推送。这是退出的代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SPKitExample.sharedInstance().callThisBeforeISVAccountLogout()
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;step8-&quot;&gt;Step8 打开会话列表和聊天页面&lt;/h4&gt;
&lt;p&gt;1.打开会话列表&lt;br /&gt;
我们app采用的是UINavigationController方式，所以打开会话列表的代码如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func openTalkList(){
    let result:YWConversationListViewController = SPKitExample.sharedInstance().ywIMKit.makeConversationListViewController()
    result.title = &quot;最近联系人&quot;
    result.setDidSelectItemBlock { (YWConversation) -&amp;gt; Void in
        (
            SPKitExample.sharedInstance().exampleOpenConversationViewControllerWithConversation(YWConversation, fromNavigationController: self.navigationController)
        )
    }
    self.navigationController?.navigationBarHidden = false
    self.navigationController?.pushViewController(result, animated: true)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2.打开单聊页面&lt;br /&gt;
我直接调用是胶水函数里面的&lt;code&gt;exampleOpenConversationViewControllerWithPerson&lt;/code&gt;方法&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func talk2Teacher(teacherId:String)
{
    SPKitExample.sharedInstance().exampleOpenConversationViewControllerWithPerson(YWPerson(personId:teacherId), fromNavigationController: self.navigationController)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3.打开群聊界面&lt;br /&gt;
阿里百川的文档里面写的是调用胶水函数里面的&lt;code&gt;exampleOpenConversationViewControllerWithTribe&lt;/code&gt;方法，但是该方法要求传入一个YWTribe类型的群组聊天变量。由于阿里百川即时通讯的架构是自建账号体系，所以我们的App只能从服务器处获取当前用户所在群的群ID，但是胶水函数里面没有现成的通过群ID打开群聊的功能，所以我通过看胶水代码以及IMSDK的群服务相关的头文件&lt;code&gt;IYWTribeService.h&lt;/code&gt;，找到IMCore.getTribeService().requestTribeFromServer函数，它可以返回一个YWTribe类型的群变量。所以我先通过该函数根据群ID查询到群信息，并且根据YWTribe类型的群变量再调用exampleOpenConversationViewControllerWithTribe方法。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func talk2Group(groudId:String)
{
    SPKitExample.sharedInstance().ywIMKit.IMCore.getTribeService().requestTribeFromServer(groudId, completion: { (YWTribe, NSError) -&amp;gt; Void in
        SPKitExample.sharedInstance().exampleOpenConversationViewControllerWithTribe(YWTribe, fromNavigationController:self.navigationController)
    })
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我觉得，胶水函数里既然有根据对方的用户ID来打开单聊界面的封装函数，就应该有这样一个根据群ID来打开群聊界面的封装函数。当时，由于对IMSDK结构的不熟悉，这个功能我还花了一些时间来找接口实现。&lt;/p&gt;

&lt;h3 id=&quot;apns&quot;&gt;2.APNS推送&lt;/h3&gt;

&lt;p&gt;我在另外一篇博文里介绍了在iOS9-Swift2-Xcode7环境下的APNS推送相关的内容，这里介绍一下具体的在阿里百川环境下的实现。&lt;/p&gt;

&lt;h4 id=&quot;step1-&quot;&gt;Step1 制作并上传证书&lt;/h4&gt;

&lt;p&gt;申请推送证书这个百度有很多教程，这里不在赘述了，反正要注意阿里百川的后台需要的生产环境的证书。&lt;/p&gt;

&lt;h4 id=&quot;step2-devicetoken&quot;&gt;Step2 申请DeviceToken&lt;/h4&gt;
&lt;p&gt;首先需要在&lt;code&gt;AppDelegate.swift&lt;/code&gt;文件的&lt;code&gt;func application(application: UIApplication, didFinishLaunchingWithOptions launchOptions: [NSObject: AnyObject]?) -&amp;gt; Bool&lt;/code&gt;函数里添加以下两句来向Apple的APNS服务器注册申请DeviceToken，这里可以设置新消息推送来App的展现形式，有Sound、Alert、Badge三种。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;UIApplication.sharedApplication().registerUserNotificationSettings(UIUserNotificationSettings(forTypes: [UIUserNotificationType.Sound , UIUserNotificationType.Alert , UIUserNotificationType.Badge], categories: nil))
UIApplication.sharedApplication().registerForRemoteNotifications()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;接着添加注册申请DeviceToken成功的回调函数：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func application(application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: NSData) {
    let token:String = deviceToken.description.stringByTrimmingCharactersInSet(NSCharacterSet(charactersInString: &quot;&amp;lt;&amp;gt;&quot;))
    print(&quot;token==\(token)&quot;)
    //将token发送到服务器
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注意：IMSDK会自动得到该DeviceToken，你无须手动传给IMSDK&lt;/p&gt;

&lt;h4 id=&quot;step3-apns&quot;&gt;Step3 处理APNS消息&lt;/h4&gt;

&lt;p&gt;由于初始化SDK的时候就调用了&lt;code&gt;SPKitExample.sharedInstance().callThisInDidFinishLaunching()&lt;/code&gt;函数，在&lt;code&gt;callThisInDidFinishLaunching&lt;/code&gt;里面已经调用了&lt;code&gt;exampleHandleAPNSPush()&lt;/code&gt;,所以就不用像文档里面说的那样再在AppDelegate didFinishLoadingWithOptions调用IYWPushService的setHandlePushBlockV3:方法。&lt;/p&gt;

&lt;h4 id=&quot;step4-xcodedistributionadhoc-provision&quot;&gt;Step4 Xcode设置为Distribution证书的AdHoc Provision打包&lt;/h4&gt;

&lt;p&gt;由于阿里百川使用的生产环节下的推送证书，而我们又不能等到应用上线到AppStore后再测试，所以这里Provisioning Profiles使用AdHoc Provision，如何申请百度也有很多教程，这里就不在赘述。&lt;/p&gt;

&lt;p&gt;这里讲一下Xcode7设置打包环境的过程：&lt;/p&gt;

&lt;p&gt;首先设置Project下的Code Signing：&lt;br /&gt;
Code Signing Identity 全部设置为Distribution证书&lt;br /&gt;
Provisioning Profiles设置为申请的Distribution-AdHoc Provision证书&lt;/p&gt;

&lt;p&gt;再设置Target下的Code Signing：&lt;br /&gt;
Code Signing Identity 全部设置为Automatic证书&lt;br /&gt;
Provisioning Profiles设置为申请的Distribution-AdHoc Provision证书&lt;/p&gt;

&lt;p&gt;在这里我遇到很多坑，经过不断的测试才发现这样的设置可以正常使用。这里我有一个疑问，就是我在第一次使用阿里百川APNS推送时，对证书不是很了解，都没有申请Distribution-AdHoc Provision，糊里糊涂就实现了推送，但是后来不知道自己怎么改动了设置，APNS就不能推送到app了。后期我学习了苹果的证书系统，申请了Distribution-AdHoc Provision证书，才又实现了APNS推送，关于第一次是如何实现功能的，我到现在都没弄明白。&lt;/p&gt;

&lt;h4 id=&quot;qa&quot;&gt;Q&amp;amp;A&lt;/h4&gt;

&lt;p&gt;如果App在后台收不到推送的消息，请参考我那篇博文以及百川的文档，里面有教我们如何利用APNS调试工具通过使用我们的证书，手动Push一条消息到我们的App。通过此方法检测推送证书和DeviceToken是否正确。如果手动推送可以，则说明App证书打包以及申请DeviceToken都是没有问题的，此时应该检测一下提交到阿里百川后台的证书有没有问题。&lt;/p&gt;

&lt;h2 id=&quot;section-5&quot;&gt;项目总结&lt;/h2&gt;

&lt;p&gt;即时通讯功能虽然只是我开发的app中的一个功能，但通过在项目中引用阿里百川即时通讯服务，让我懂了一点如何在Swift项目调用OC-SDK，这为我调用更多第三方OC语言SDK提供了基础。&lt;/p&gt;

&lt;p&gt;在这里非常感谢阿里百川-即时通讯的技术支持在我开发过程中提供的帮助！&lt;/p&gt;
</description>
        <pubDate>Thu, 03 Dec 2015 04:55:15 +0800</pubDate>
        <link>http://recursion0210.github.io//2015/12/03/%E5%8D%B3%E6%97%B6%E9%80%9A%E4%BF%A1%E5%8A%9F%E8%83%BD%E5%BC%80%E5%8F%91/</link>
        <guid isPermaLink="true">http://recursion0210.github.io//2015/12/03/%E5%8D%B3%E6%97%B6%E9%80%9A%E4%BF%A1%E5%8A%9F%E8%83%BD%E5%BC%80%E5%8F%91/</guid>
        
        <category>iOS</category>
        
        <category>阿里百川即时通讯</category>
        
        
      </item>
    
      <item>
        <title>iOS9-Swift2-Xcode7的APNS使用</title>
        <description>&lt;h1 id=&quot;ios9-swift2-xcode7apns&quot;&gt;iOS9-Swift2-Xcode7的APNS使用&lt;/h1&gt;

&lt;h2 id=&quot;section&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;最近在开发基于阿里百川的即时通信功能，其中对于iOS平台的消息推送是要使用苹果的APNS服务的，对于这个服务不太了解的同学，可以看&lt;a href=&quot;https://developer.apple.com/library/ios/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/Chapters/ApplePushService.html?spm=0.0.0.0.EUOBVe&quot;&gt;apple开发者文档&lt;/a&gt;学习一下。&lt;/p&gt;

&lt;h2 id=&quot;apns&quot;&gt;总结一下使用APNS推送的步骤：&lt;/h2&gt;

&lt;p&gt;1.iOS应用需要向APNS系统申请DeviceToken&lt;/p&gt;

&lt;p&gt;2.应用需要向应用服务器上传DeviceToken&lt;/p&gt;

&lt;p&gt;3.服务器通过DeviceToken向APNS系统推送消息&lt;/p&gt;

&lt;p&gt;4.APNS系统往用户的手机推送消息&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;实现步骤：&lt;/h2&gt;

&lt;h3 id=&quot;devicetoken&quot;&gt;1.申请DeviceToken&lt;/h3&gt;
&lt;p&gt;在AppDelegate.swift中的application(application: UIApplication, didFinishLaunchingWithOptions launchOptions: [NSObject: AnyObject]?) -&amp;gt; Bool中添加以下函数向系统申请DeviceToken&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;UIApplication.sharedApplication().registerUserNotificationSettings(UIUserNotificationSettings(forTypes: [UIUserNotificationType.Sound , UIUserNotificationType.Alert , UIUserNotificationType.Badge], categories: nil))

UIApplication.sharedApplication().registerForRemoteNotifications()
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;devicetoken-1&quot;&gt;2.获取DeviceToken&lt;/h3&gt;
&lt;p&gt;在AppDelegate.swift中添加下面这个回调函数，用于获取DeviceToken&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	func application(application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: NSData) {
        let token:String = deviceToken.description.stringByTrimmingCharactersInSet(NSCharacterSet(charactersInString: &quot;&amp;lt;&amp;gt;&quot;))
        print(&quot;token==\(token)&quot;)
        //将token发送到服务器
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使用阿里百川的SDK不需要将DeviceToken发送到服务器，IMSDK会自动得到该DeviceToken，你无须手动传给IMSDK&lt;/p&gt;

&lt;h3 id=&quot;apns-1&quot;&gt;3.获取APNS推送证书&lt;/h3&gt;

&lt;p&gt;在iOSAppIDs你的应用里的证书里，点击edit，打开Push Notifications功能，然后会生成两个证书。Production SSL Certificate和Development SSL Certificate。前面是生产环境推送证书，后面是沙箱环境推送证书。将其下载下来，并安装到钥匙串中。&lt;/p&gt;

&lt;p&gt;在钥匙串应用找到这两个证书，右键点击导出，生产p12格式（阿里百川需要p12格式)，在将其上传到阿里百川的控制台。&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;4.测试消息推送&lt;/h3&gt;
&lt;p&gt;使用&lt;a href=&quot;http://pan.baidu.com/s/1ntngmcL&quot;&gt;该工具&lt;/a&gt;,使用你上传的证书，向设备控制台打印出的DeviceToken，发送一条Push，确认是否可以收到Push。&lt;/p&gt;

&lt;p&gt;需要注意的是：项目的证书要和推送证书的类型一致，若是Disturbution证书就得使用Production SSL Certificate，若是Developer证书就得使用Development SSL Certificate。&lt;/p&gt;

</description>
        <pubDate>Thu, 03 Dec 2015 04:55:15 +0800</pubDate>
        <link>http://recursion0210.github.io//2015/12/03/iOS9-Swift2-Xcode7-APNS/</link>
        <guid isPermaLink="true">http://recursion0210.github.io//2015/12/03/iOS9-Swift2-Xcode7-APNS/</guid>
        
        <category>拾遗集</category>
        
        
      </item>
    
      <item>
        <title>iOS-webApp客户端 开发小记</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;这篇文章，现在是我写的第二遍，因为就在我刚才准备commit的时候，手贱点了sync，结果白写了一个小时。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;section&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;暑期以来我一直在一家物联网公司实习，刚来的时候开发了一款物联网云服务的iOS客户端，也许你会问为啥一个实习生刚来就开发产品，主要原因是我能力超强，还有一个很小的原因是全公司就我用Mac，并且会点点Swift，哈哈。&lt;/p&gt;

&lt;p&gt;刚来是开发一款物联网应用的iOS客户端（&lt;a href=&quot;https://itunes.apple.com/us/app/iotcloud/id1045360550?l=zh&amp;amp;ls=1&amp;amp;mt=8&quot;&gt;1.0版本&lt;/a&gt;现在已上线），后期开发了一段时间这个产品的后台，主要是MongoDB和Java Web。之后，我又被叫去开发另一款云教育应用的iOS客户端和Android客户端。这篇文章主要介绍的是开发这两款iOS应用的总结，后期会总结一下在Android上实现同样功能的经验。&lt;/p&gt;

&lt;p&gt;我们公司的产品都是前端是采用HTML5的，这样每个平台的客户端只要套个UIWebView的壳子就好。但是问题不是全部网页都是从服务器端加载的，因为不能保证网络一直畅通，以及服务器没有错，要是网络不通，那整个应用就是一片空白，这样的体验太差了。&lt;/p&gt;

&lt;p&gt;所以我们的想法是欢迎页、登陆页都是本地的资源，这样应用打开，不管服务器啥情况，用户都是可以看见东西的。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-1&quot;&gt;应用逻辑&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;打开应用，首先加载welcome.htm(原本是jsp文件，在Android平台上可以加载，但是Safari不行，所以直接改了后缀)，welcome.htm的js会从sqlite中取出用户名和密码，若不为空，则直接表单提交登录；如为空，则跳转到本地login.htm界面进行登录&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;用户在login.htm进行登录，若登录成功，则其中的js文件会将用户名、密码存入sqlite中&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;应用中有二维码扫描功能，若点击该按钮，则跳转回本地，使用相机进行二维码扫描，然后将结果又返回给网页应用&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;应用中有退出功能，若点击该按钮，则跳转回本地login.htm界面，其中的js会清空sqlite中数据&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-2&quot;&gt;遇到的问题以及解决方法&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Xcode7导入本地资源&lt;/p&gt;

    &lt;p&gt;之前用的是Xcode6，项目下面有一个Supporting Files文件夹，将本地资源导入后都在此文件夹中，升级到Xcode7后，没有这个文件夹了，可以直接将本地资源直接导入项目中。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;iOS9网络连接问题&lt;/p&gt;

    &lt;p&gt;刚开始用Xcode6开发第一项目的时候，UIWebView联网是没有问题的，第二个项目使用的是Xcode7和iOS9，就连打开baidu都无法实现，控制台会报错：&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt; Application Transport Security has blocked a cleartext HTTP (http://)
 resource load since it is insecure. Temporary exceptions can be configured
 via your app&#39;s Info.plist file.
&lt;/code&gt;&lt;/pre&gt;

    &lt;p&gt;当时在Stack Overflow找到原因了：&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt; 在iOS9 beta1中，苹果将原http协议改成了https协议，使用 TLS1.2 SSL加密请求数据。
&lt;/code&gt;&lt;/pre&gt;

    &lt;p&gt;解决方法就是：&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt; 在info.plist中添加
 &amp;lt;key&amp;gt;NSAppTransportSecurity&amp;lt;/key&amp;gt;
 &amp;lt;dict&amp;gt;&amp;lt;key&amp;gt;NSAllowsArbitraryLoads&amp;lt;/key&amp;gt;&amp;lt;true/&amp;gt;&amp;lt;/dict&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

    &lt;p&gt;后来在&lt;a href=&quot;http://www.infoq.com/cn/articles/wechat-ios9-adaptation&quot;&gt;《微信在适配iOS9上遇到的问题和解决方案》&lt;/a&gt;也看到了该问题的解决方法。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;UIWebView加载本地资源&lt;/p&gt;

    &lt;p&gt;我做的项目中，主要是UIWebView加载本地的网页，代码如下：&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt; let path = NSBundle.mainBundle().pathForResource(&quot;index&quot;, ofType: &quot;htm&quot;)
 let urlobj = NSURL.fileURLWithPath(path!)
 let request = NSURLRequest(URL: urlobj)
 myWebView.loadRequest(request)
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;从网页跳转回本地&lt;/p&gt;

    &lt;p&gt;前面说到项目的两个功能：一是网页调用本地二维码；二是在网页里退出，本地能清除登录数据。&lt;/p&gt;

    &lt;p&gt;我的解决思路是：web应用中，需要跳转本地的功能，都把链接写成固定格式的&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt; &amp;lt;a href=&quot;m://erweima.com/&quot; class=&quot;link_btn link_btn_t&quot;&amp;gt;二维码扫描&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

    &lt;p&gt;UIWebView中有一个方法，可以在链接地址改变时触发，我就是利用该方法，判断UIWebView即将要跳转的链接地址，如果是事先确定的，则执行本地相关操作，如上所述的二维码操作：&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt; func webView(webView: UIWebView, shouldStartLoadWithRequest request: NSURLRequest,
 navigationType: UIWebViewNavigationType) -&amp;gt; Bool  {
 	let rurl = request.URL
 	if(rurl!.scheme == &quot;m&quot; &amp;amp;&amp;amp; rurl!.host == &quot;erweima.com&quot;)
 	{//启动二维码扫描
 		tiaozhuan()
  	}
 	//返回true就会跳转新地址
 }
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;二维码扫描功能&lt;/p&gt;

    &lt;p&gt;这里用到一个用Swift2和AVFoundation写的二维码扫描的类&lt;a href=&quot;https://github.com/Recursion0210/QRCode&quot;&gt;github&lt;/a&gt;，类里用的是UIStoryBoard进行跳转的，我稍微改动了一下，用方法调用的：&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;  func tiaozhuan() {
 let scannerVC:ScannerViewController = ScannerViewController()
 scannerVC.delegate = self

 self.presentViewController(scannerVC, animated: false, completion: nil)  }
&lt;/code&gt;&lt;/pre&gt;

    &lt;p&gt;ViewController继承了ScannerViewControllerDelegate协议，实现了：&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt; func barcodeObtained(viewController: ScannerViewController, data: String) {
 //打印二维码扫描的结果
 print(data)        
 }
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;
&lt;p&gt;项目本来已经做完了，经理又加了一些功能，因此又来补充了。&lt;/p&gt;

&lt;p&gt;今天周三，是光棍节，周一做的是Android和iOS的判断网络状态的功能，周二和今天上午做的是Android的即时通讯和实时音视频功能，今天下午做的是iOS的即时通讯功能，由于SDK用的是OC，而我用的是Swift，所以到现在也没搞出来啥，还好项目不急，所以来更新一下博客。&lt;/p&gt;

&lt;p&gt;2015-11-11 17:55&lt;/p&gt;

&lt;hr /&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;判断网络状态&lt;/p&gt;

    &lt;h5 id=&quot;section-3&quot;&gt;问题：&lt;/h5&gt;

    &lt;p&gt;是这样的，由于产品登陆完之后，全部内容都在UIWebView中，要是网络突然断了，就会显示无法连接界面，这样用户体验不好，如果后面能联网了，又不能返回到断网之前的界面。&lt;/p&gt;

    &lt;h5 id=&quot;section-4&quot;&gt;需求：&lt;/h5&gt;

    &lt;p&gt;在尽量不改后台的情况下，解决上面的问题&lt;/p&gt;

    &lt;h5 id=&quot;section-5&quot;&gt;解决思路：&lt;/h5&gt;

    &lt;p&gt;在每次需要跳转之前，先判断一下网络状态，若是可以联网则不处理；若不能联网，则存储当前链接，并跳转到本地一个不能联网的界面，该界面上有刷新按钮，通过不断点击刷新按钮来重复跳转该界面，然后可以判断网络情况，若可以联网了，则加载之前存储的链接。&lt;/p&gt;

    &lt;p&gt;上面的逻辑代码就不贴了，没有参考意义，反正就是在上面第四点的webView方法中进行处理。这里我放一个判断网络状态的项目地址&lt;a href=&quot;https://github.com/ashleymills/Reachability.swift&quot;&gt;Reachability.swift-github&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;即时通讯&lt;/p&gt;

    &lt;h5 id=&quot;section-6&quot;&gt;问题：&lt;/h5&gt;

    &lt;p&gt;由于我们的项目是做教育类的，需要用户之间可以进行类似于微信那样的通信功能，并且可以进行实时音、视频通话功能。&lt;/p&gt;

    &lt;h5 id=&quot;section-7&quot;&gt;需求：&lt;/h5&gt;

    &lt;p&gt;实现上述功能，还要尽可能的保证服务质量&lt;/p&gt;

    &lt;h5 id=&quot;section-8&quot;&gt;解决思路：&lt;/h5&gt;

    &lt;p&gt;我想到的方法是集成第三方的服务，目前用的是&lt;a href=&quot;http://www.yuntongxun.com/&quot;&gt;容联云服务&lt;/a&gt;。还没做完，未完待续。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Fri, 06 Nov 2015 01:00:15 +0800</pubDate>
        <link>http://recursion0210.github.io//2015/11/06/iOS-webApp%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%BC%80%E5%8F%91-%E5%B0%8F%E8%AE%B0/</link>
        <guid isPermaLink="true">http://recursion0210.github.io//2015/11/06/iOS-webApp%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%BC%80%E5%8F%91-%E5%B0%8F%E8%AE%B0/</guid>
        
        <category>拾遗集</category>
        
        
      </item>
    
      <item>
        <title>博文的开始</title>
        <description>&lt;p&gt;起这个题目，是向我一个学长&lt;a href=&quot;http://blog.csdn.net/decting/article/details/8062457&quot;&gt;致敬&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;今天是2015年元旦，照这样说来就算是去年，我认识了这个学长。当初是请教学长安卓问题，然后由于时间问题直接到学长寝室请他帮忙调程序。说真的，看着高手调程序真的能学到太多，他们解决问题的思路和方法真的很值得我们去学习，我记得当时学会了用Log.i(“”,”“)来跟踪程序运行状况。&lt;/p&gt;

&lt;p&gt;进入大学三年了，期间从网上学习了很多东西，一直以来我只是有一个互联网内容消费者，没有创造过什么。CSDN的账号创建很久了，每次看到技术牛人写的关于各类问题的解决方法以及他们自身对于问题的思考，就非常的崇拜以及感谢他们的付出。经常在看完他们的技术博客之后，在想自己是不是也能写一点什么，就像知乎说的那样，与世界分享你的知识和见解，然而一拖就拖到现在。其实，原来也真的什么都不会，没得内容来与大家分享。渐渐的我也做了一些项目，成为了学弟们的学长，我想我也应该把自己遇到问题的一些解决方法和对这些方法的思考写出来，而不是只记录在我自己的OneNote里面。&lt;/p&gt;

&lt;p&gt;我是物联网专业学生，所开发的一些也都是软硬件结合的项目，我会在此与大家分享经验。&lt;/p&gt;

&lt;p&gt;好了，那这第一篇文章就作为我新阶段的开始，2015年我会准备考研，因此会对相关的科目进行复习与总结，我也会在此记录我考研路上对于专业相关问题的感悟。&lt;br /&gt;
   最后，从学长那抄一句：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;我们的目标是没有遗憾。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;以上是我在2015年1月1日在CSDN上写的第一篇博文，&lt;/p&gt;

&lt;p&gt;当时已值大三，开博的目的是可以分享一些项目经验以及记录一下考研备战路上的点点滴滴。可惜当时准备考研，后期在写过一篇《Android-Lint使用后的错误解决》之后便停滞项目开发了，后来到了五月份，我放弃了考研，一心想着就业，于是暑期开始便一直在北京一家物联网公司实习，时间飞快，有些事情却偏偏以它奇怪的姿势改变我的轨迹，比如：我保研了。&lt;/p&gt;

&lt;p&gt;前段时间把公司一个产品的iOS客户端写好，然后从注册开发者账号开始到最后弄上App Store，至此我也算一个iOS开发菜鸟了，哈哈。上周把MongoDB项目暂时完成了，经理儿子出世回家去了，所以这几天也没有人给我安排工作，在网上瞎逛的时候，突然想起来今年第一天给自己安排的任务，于是花了一上午学习Markdown和Github Page以及jekyll。&lt;/p&gt;

&lt;p&gt;我想在未来的日子里，我应该做点什么了，逝者如斯夫，应该把生活过的像自己想要的那样，才对嘛。&lt;/p&gt;

</description>
        <pubDate>Mon, 19 Oct 2015 18:38:15 +0800</pubDate>
        <link>http://recursion0210.github.io//jekyll/update/2015/10/19/%E5%8D%9A%E6%96%87%E7%9A%84%E5%BC%80%E5%A7%8B/</link>
        <guid isPermaLink="true">http://recursion0210.github.io//jekyll/update/2015/10/19/%E5%8D%9A%E6%96%87%E7%9A%84%E5%BC%80%E5%A7%8B/</guid>
        
        <category>拾遗集</category>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
  </channel>
</rss>
